countriesBuffer = buffer(countries, width=3, dissolve=F)
countriesPolygons <- SpatialPolygons(countries@polygons)
countriesMerged <- gUnaryUnion(countries@polygons)
countriesMerged <- gUnaryUnion(countries@polygons)
countriesMerged <- gUnaryUnion(countries@polygons)
countries@polygons
class(countries@polygons)
class(countriesPolygons)
countriesMerged <- gUnaryUnion(countriesPolygons)
countriesPolygons <- SpatialPolygons(countries@polygons)
countriesMerged <- gUnaryUnion(countries@polygons)
countriesMerged <- gUnaryUnion(countries)
countriesMerged <- gUnaryUnion(countries@polygons)
plot(countriesPolygons)
countries_buf <- gBuffer(countries, width = 1000, quadsegs = 10)
plot(countries_buf)
class(countriesPolygons)
class(countries@polygons)
##BUFFER start
#2nd way
#Error: TopologyException: unable to assign free hole to a shell at 12.46467256644139 43.895551918479619
countriesBuffer <- buffer(countries, width=5, dissolve=TRUE) # 5 Degree buffer
class(countriesPolygons)
new1 <- st_as_sf(countriesPolygons)
library(sf)
new1 <- st_as_sf(countriesPolygons)
st_crs(countriesPolygons) = st_crs(new1)
View(countriesMerged)
plot(new1)
spTransform(countriesPolygons)
library(dplyr)
library(mapview) # needed only for the final overview
library(dplyr)
library(mapview) # needed only for the final overview
library(leafsync) # dtto.
result <- countries %>%
sf::st_transform(5683) %>%  # transform to a metric CRS
sf::st_buffer(10) # buffer by 10 meters
getwd()
rm(list = ls(all=T))
#### Install required libraries ####
library(rgbif)
library(raster)
library(sp)
library(mapr)
library(dismo)
library(rgeos)
#### Define extent and import study area shapefile ####
#assign CRS
P4S.latlon <- CRS("+proj=longlat +datum=WGS84 +ellps=WGS84 +towgs84=0,0,0")
#Import shapefile
countries <- rgdal::readOGR("GISDATA/Study Area SHP")
#dev.off()
proj4string(countries) <- P4S.latlon
plot(countries)
class(countries)
str(countries); countries@bbox
#1st way:
countriesBuffer = buffer(countries, width=3, dissolve=F)
plot(countriesBuffer, add=T, col='red')
extent(countriesBuffer);extent(countries)
plot(countries, add=T)
plot(countriesBuffer,col='darkred',main = 'b) 30 m buffer',lty=0)
plot(countries,col='darkred',main = 'b) 30 m buffer',lty=0)
plot(countriesBuffer,col='darkred',main = 'b) 30 m buffer',lty=0)
plot(countries,col='darkred',main = 'b) 30 m buffer',lty=0)
countriesPolygons <- SpatialPolygons(countries@polygons)
plot(countriesBuffer,col='darkred',main = 'b) 30 m buffer',lty=0)
plot(countries,col='darkred',main = 'b) 30 m buffer',lty=0)
plot(countriesBuffer,col='darkred',main = 'b) 30 m buffer',lty=0)
countriesPolygons <- SpatialPolygons(countries@polygons)
#BUFFERED EXTENT IS THE SAME WITH THE ORIGINAL EXTENT??
extent(countriesBuffer);extent(countries)
##BUFFER start
#2nd way
#Error: TopologyException: unable to assign free hole to a shell at 12.46467256644139 43.895551918479619
countriesBuffer <- buffer(countries, width=5, dissolve=TRUE) # 5 Degree buffer
#1st way:
countriesBuffer <- buffer(countries, width=3, dissolve=F)
countriesMerged <- gUnaryUnion(countries@polygons)
countriesMerged <- gUnaryUnion(countriesPolygons)
countriesPolygons <- SpatialPolygons(countries@polygons)
class(countries@polygons)
class(countriesPolygons)
str(countriesPolygons)
countriesMerged <- gUnaryUnion(countriesPolygons)
countriesMerged <- gUnaryUnion(countries@polygons)
countriesMerged <- gUnaryUnion(countries@polygons)
countries_buf <- gBuffer(countries, width = 1000, quadsegs = 10)
plot(countries_buf)
extent(countries)
extent(countriesBuffer)
extent(countries_buf)
#### 1. GBIF DATA ####
#get the key of species by its name
key = name_backbone(name="Oeneis jutta")$speciesKey
#search data according to key. **occ_data vs occ_Search
dat <- occ_data(taxonKey = key,limit=1000) #limit??
names(dat)
names(dat$data)
#assign data to a variable
dat.data <- dat$data
dat.data
#plot occurences
map_plot(dat.data, lon = "decimalLongitude", lat = "decimalLatitude", size = 1, pch = 3)
#plot occurrences data and the study area
plot(countries); points(dat.data$decimalLongitude, dat.data$decimalLatitude, pch=19, col="red")
plot(countries)
#plot occurrences data and the study area
plot(countries); points(dat.data$decimalLongitude, dat.data$decimalLatitude, pch=19, col="red")
#plot occurrences data and the study area
plot(countries); points(dat.data$decimalLongitude<100, dat.data$decimalLatitude, pch=19, col="red")
#plot occurrences data and the study area
plot(countries); points(dat.data$decimalLongitude<50, dat.data$decimalLatitude, pch=19, col="red")
#plot occurrences data and the study area
plot(countries); points(dat.data$decimalLongitude, dat.data$decimalLatitude, pch=19, col="red")
dat.data$decimalLongitude
#plot occurrences data and the study area
plot(countries); points(dat.data$decimalLongitude >= -43 , dat.data$decimalLatitude <= 109 , pch=19, col="red")
#plot occurrences data and the study area
plot(countries); points(dat.data$decimalLongitude >= 109 , dat.data$decimalLatitude <= -43 , pch=19, col="red")
dat.data$decimalLongitude
#plot occurrences data and the study area
plot(countries); points(dat.data$decimalLongitude >= -43 , dat.data$decimalLatitude <= -43 , pch=19, col="red")
#plot occurrences data and the study area
plot(countries); points(dat.data$decimalLongitude >= -43 , dat.data$decimalLatitude <= 109 , pch=19, col="red")
#plot occurrences data and the study area
plot(countries); points(dat.data$decimalLongitude >= -43 & dat.data$decimalLatitude <= 109 , pch=19, col="red")
#plot occurrences data and the study area
plot(countries); points([dat.data$decimalLongitude >= -43 & dat.data$decimalLatitude <= 109] , pch=19, col="red")
dat.points <- dat.data[dat.data$decimalLongitude >= -43 & dat.data$decimalLatitude <= 109, ]
#plot occurrences data and the study area
plot(countries); points(dat.points$decimalLongitude , dat.points$decimalLatitude, pch=19, col="red")
plot(countries)
#plot occurrences data and the study area
plot(countries); points(dat.points$decimalLongitude , dat.points$decimalLatitude, pch=19, col="red")
plot(countries); points(dat.data$decimalLongitude , dat.data$decimalLatitude, pch=19, col="red")
#plot occurrences data and the study area
plot(countries); points(dat.points$decimalLongitude , dat.points$decimalLatitude, pch=19, col="red")
#Prepare the data
fe.gbif <- dat.data[, c('species', 'decimalLongitude', 'decimalLatitude')]
head(fe.gbif); dim(fe.gbif)
duplicates <- duplicated(fe.gbif)
fe.gbif <- fe.gbif[!duplicates,]
head(fe.gbif); dim(fe.gbif)
fe.gbif.maxent <- fe.gbif[, c("species", "decimalLongitude", "decimalLatitude")]
names(fe.gbif.maxent) <- c("species", "lon", "lat")
head(fe.gbif.maxent); dim(fe.gbif.maxent)
plot(countries); points(fe.gbif.maxent$lon, fe.gbif.maxent$lat, pch=19, col='red')
#take all the points in the study area
dat.extent <- dat.data[dat.data$decimalLongitude >= -43 & dat.data$decimalLatitude <= 109, ]
#plot occurrences data and the study area
plot(countries); points(dat.extent$decimalLongitude , dat.extent$decimalLatitude, pch=19, col="red")
#Prepare the data
fe.gbif <- dat.extent[, c('species', 'decimalLongitude', 'decimalLatitude')]
head(fe.gbif); dim(fe.gbif)
duplicates <- duplicated(fe.gbif)
fe.gbif <- fe.gbif[!duplicates,]
head(fe.gbif); dim(fe.gbif)
write.csv(fe.gbif, 'Oeneis_jutta.csv', row.names=F)
fe.gbif.maxent <- fe.gbif[, c("species", "decimalLongitude", "decimalLatitude")]
names(fe.gbif.maxent) <- c("species", "lon", "lat")
head(fe.gbif.maxent); dim(fe.gbif.maxent)
plot(countries); points(fe.gbif.maxent$lon, fe.gbif.maxent$lat, pch=19, col='red')
write.csv(fe.gbif.maxent, 'Output/fe.gbif.maxent.csv', row.names=F) # write species points file
#assign the fe.gbif as SpatialPointsDataFrame
coordinates(fe.gbif) <- ~decimalLongitude+decimalLatitude
str(fe.gbif)
fe.gbif@proj4string <- P4S.latlon
plot(countries); plot(fe.gbif, col='red', add=T, pch = 16)
# read worldclim
files.present <- list.files('D:/Github/BGE-SDM/RDATA/clipped/', pattern="[.]asc$", full.names=T) # alternatives for pattern (c|C)(e|E)(l|L)$
files.present
present.stack <- stack(files.present)
head(present.stack)
l
library(biomod2)
library(ggplot2)
library(gridExtra)
library(raster)
library(rasterVis)
BiomodOptions <- BIOMOD_ModelingOptions()
fe.gbif.maxent@data["species"]
fe.gbif@data["species"]
d<-read.csv("D:/Github/BGE-SDM/Output/fe.gbif.maxent2.csv",header=TRUE, sep=",")
BiomodOptions <- BIOMOD_ModelingOptions()
Data.To.Model<-BIOMOD_FormatingData(resp.var = as.data.frame(d$Oeneis_jutta),##presence absence data
expl.var = present.stack,##explanantory maps
resp.xy = d[,c("lon","lat")],##locations that match with the presence/absence observations
resp.name = "Oeneis jutta")##a name of the species
d
Data.To.Model<-BIOMOD_FormatingData(resp.var = as.data.frame(d$Oeneis_jutta),##presence absence data
expl.var = present.stack,##explanantory maps
resp.xy = d[,c("lon","lat")],##locations that match with the presence/absence observations
resp.name = "Oeneis jutta")##a name of the species
Data.To.Model<-BIOMOD_FormatingData(resp.var = as.data.frame(d$Oeneis.jutta),##presence absence data
expl.var = present.stack,##explanantory maps
resp.xy = d[,c("lon","lat")],##locations that match with the presence/absence observations
resp.name = "Oeneis jutta")##a name of the species
Data.To.Model<-BIOMOD_FormatingData(resp.var = as.data.frame(d$Oeneis.jutta),##presence absence data
expl.var = present.stack,##explanantory maps
resp.xy = d[,c("lon","lat")],##locations that match with the presence/absence observations
resp.name = "Oeneis jutta")##a name of the species
## then run the model
ModelOut <- BIOMOD_Modeling(        Data.To.Model,##earlier prepared input data
models = c("GBM","MAXENT","RF"),##selection of models to run (make sure the righ packages are installed, check the additional description for MAXENT in "Biomod literature\Include_Maxent.pdf"
models.options = BiomodOptions,##load the default options
NbRunEval=10,##the number of evaluation runs
DataSplit=80,##the percentage for trainign the data (the remained is for validation)
VarImport=10,##how often the data has to permutaed to estimate variable importance
models.eval.meth = c('KAPPA','TSS','ROC'),##select which validation statistics to collect
SaveObj = TRUE,## decide whether ALL output has to be saved on the hard drive
rescal.all.models = TRUE,##when different models have to be rescaled to similar values
do.full.models = FALSE,
modeling.id = "RUN1")##to give each time you run a model a different name
## then run the model
ModelOut <- BIOMOD_Modeling(        Data.To.Model,##earlier prepared input data
models = c("GBM","MAXENT","RF"),##selection of models to run (make sure the righ packages are installed, check the additional description for MAXENT in "Biomod literature\Include_Maxent.pdf"
models.options = BiomodOptions,##load the default options
NbRunEval=10,##the number of evaluation runs
DataSplit=80,##the percentage for trainign the data (the remained is for validation)
VarImport=10,##how often the data has to permutaed to estimate variable importance
models.eval.meth = c('RF'),##select which validation statistics to collect
SaveObj = TRUE,## decide whether ALL output has to be saved on the hard drive
rescal.all.models = TRUE,##when different models have to be rescaled to similar values
do.full.models = FALSE,
modeling.id = "RUN1")##to give each time you run a model a different name
## then run the model
ModelOut <- BIOMOD_Modeling(        Data.To.Model,##earlier prepared input data
models = c("RF"),##selection of models to run (make sure the righ packages are installed, check the additional description for MAXENT in "Biomod literature\Include_Maxent.pdf"
models.options = BiomodOptions,##load the default options
NbRunEval=10,##the number of evaluation runs
DataSplit=80,##the percentage for trainign the data (the remained is for validation)
VarImport=10,##how often the data has to permutaed to estimate variable importance
models.eval.meth = c('RF'),##select which validation statistics to collect
SaveObj = TRUE,## decide whether ALL output has to be saved on the hard drive
rescal.all.models = TRUE,##when different models have to be rescaled to similar values
do.full.models = FALSE,
modeling.id = "RUN1")##to give each time you run a model a different name
##notice that we don't use any of the explanantory variables that are specificied in d.
## these are directly extracted from the maps, so all that is needed are locations and presence and absence data
## (and the maps ofcourse)
library(foreign)
library(raster)
library(biomod2)
library(gbm)
library(stringr)
library(PresenceAbsence)
## then run the model
ModelOut <- BIOMOD_Modeling(        Data.To.Model,##earlier prepared input data
models = c("GBM","MAXENT","RF"),##selection of models to run (make sure the righ packages are installed, check the additional description for MAXENT in "Biomod literature\Include_Maxent.pdf"
models.options = BiomodOptions,##load the default options
NbRunEval=10,##the number of evaluation runs
DataSplit=80,##the percentage for trainign the data (the remained is for validation)
VarImport=10,##how often the data has to permutaed to estimate variable importance
models.eval.meth = c('KAPPA','TSS','ROC'),##select which validation statistics to collect
SaveObj = TRUE,## decide whether ALL output has to be saved on the hard drive
rescal.all.models = TRUE,##when different models have to be rescaled to similar values
do.full.models = FALSE,
modeling.id = "RUN1")##to give each time you run a model a different name
BiomodOptions <- BIOMOD_ModelingOptions()
Data.To.Model<-BIOMOD_FormatingData(resp.var = as.data.frame(d$Oeneis.jutta),##presence absence data
expl.var = present.stack,##explanantory maps
resp.xy = d[,c("lon","lat")],##locations that match with the presence/absence observations
resp.name = "Oeneis jutta")##a name of the species
Data.To.Model<-BIOMOD_FormatingData(resp.var = as.data.frame(d$Oeneis.jutta),##presence absence data
expl.var = present.stack,##explanantory maps
resp.xy = d[,c("lon","lat")],##locations that match with the presence/absence observations
resp.name = "Oeneis.jutta")##a name of the species
## then run the model
ModelOut <- BIOMOD_Modeling(        Data.To.Model,##earlier prepared input data
models = c("GBM","MAXENT","RF"),##selection of models to run (make sure the righ packages are installed, check the additional description for MAXENT in "Biomod literature\Include_Maxent.pdf"
models.options = BiomodOptions,##load the default options
NbRunEval=10,##the number of evaluation runs
DataSplit=80,##the percentage for trainign the data (the remained is for validation)
VarImport=10,##how often the data has to permutaed to estimate variable importance
models.eval.meth = c('KAPPA','TSS','ROC'),##select which validation statistics to collect
SaveObj = TRUE,## decide whether ALL output has to be saved on the hard drive
rescal.all.models = TRUE,##when different models have to be rescaled to similar values
do.full.models = FALSE,
modeling.id = "RUN1")##to give each time you run a model a different name
## run the individual models ----
Oeneis_jutta_models <-
BIOMOD_Modeling(
data = Oeneis_jutta_data,
models = c("GLM", "GBM", "RF", "GAM"),
models.options = Oeneis_jutta_opt,
NbRunEval = 2,
DataSplit = 80,
VarImport = 3,
modeling.id = "demo1"
)
## run the individual models ----
Oeneis_jutta_models <-
BIOMOD_Modeling(
data = as.data.frame(d$Oeneis.jutta),
models = c("GLM", "GBM", "RF", "GAM"),
models.options = Oeneis_jutta_opt,
NbRunEval = 2,
DataSplit = 80,
VarImport = 3,
modeling.id = "demo1"
)
## run the individual models ----
Oeneis_jutta_models <-
BIOMOD_Modeling(
data = as.data.frame(d$Oeneis.jutta),
models = c("GLM", "GBM", "RF", "GAM"),
models.options = Oeneis_jutta_opt,
NbRunEval = 2,
DataSplit = 80,
VarImport = 3,
modeling.id = "demo12"
)
###### TESTING BY DIFFERENT CSVs #####
#edited version of maxent by changing column name to species and giving a value as 1.
Oeneis_jutta_occ <- read.csv('Output/fe.gbif.maxent2.csv')
summary(Oeneis_jutta_occ)
## format the data ----
Oeneis_jutta_data <-
BIOMOD_FormatingData(
resp.var = Oeneis_jutta_occ['Oeneis.jutta'],
resp.xy = Oeneis_jutta_occ[, c('lon', 'lat')],
expl.var = present.stack,
resp.name = "Oeneis.jutta",
PA.nb.rep = 2,
PA.nb.absences = 500,
PA.strategy = 'random'
)
## plot of selected pseudo-absences
plot(Oeneis_jutta_data)
## run the individual models ----
Oeneis_jutta_models <-
BIOMOD_Modeling(
data = Oeneis_jutta_data,
models = c("GLM", "GBM", "RF", "GAM"),
models.options = BiomodOptions,
NbRunEval = 2,
DataSplit = 80,
VarImport = 3,
modeling.id = "demo1"
)
## run the individual models ----
Oeneis_jutta_models <-
BIOMOD_Modeling(
data = as.data.frame(d$Oeneis.jutta),
models = c("GLM", "GBM", "RF", "GAM"),
models.options = Oeneis_jutta_opt,
NbRunEval = 2,
DataSplit = 80,
VarImport = 3,
modeling.id = "demo12"
)
fe.gbif.maxent
fe.gbif.maxent#species == 1
fe.gbif.maxent$species == 1
dene <- fe.gbif.maxent[fe.gbif.maxent$species == 1]
dene <- fe.gbif.maxent[fe.gbif.maxent$species = 1]
fe.gbif.maxent
fe.gbif.maxent$species[fe.gbif.maxent$species == 1] <- "Oeneis jutta"
fe.gbif.maxent
fe.gbif.maxent$species
fe.gbif.maxent[fe.gbif.maxent$species == 1] <- "Oeneis jutta"
fe.gbif.maxent[fe.gbif.maxent$species == 1]
fe.gbif.maxent[fe.gbif.maxent$species
fe.gbif.maxent["species"] <- 1
fe.gbif.maxent
fe.gbif.maxent["species"] <- 1
fe.gbif.maxent
###### TESTING BY DIFFERENT CSVs #####
#edited version of maxent by changing column name to species and giving a value as 1.
Oeneis_jutta_occ <- fe.gbif.maxent["species"] <- 1
summary(Oeneis_jutta_occ)
Oeneis_jutta_occ
###### TESTING BY DIFFERENT CSVs #####
#edited version of maxent by changing column name to species and giving a value as 1.
fe.gbif.biomod2 <- fe.gbif
fe.gbif.biomod2
View(fe.gbif.biomod2)
fe.gbif.biomod2["species"] <- 1
fe.gbif
###### TESTING BY DIFFERENT CSVs #####
#edited version of maxent by changing column name to species and giving a value as 1.
fe.gbif.biomod2 <- fe.gbif.maxent
fe.gbif.biomod2["species"] <- 1
fe.gbif.biomod2
Oeneis_jutta_occ <- fe.gbif.biomod2
summary(Oeneis_jutta_occ)
## format the data ----
Oeneis_jutta_data <-
BIOMOD_FormatingData(
resp.var = Oeneis_jutta_occ['species'],
resp.xy = Oeneis_jutta_occ[, c('lon', 'lat')],
expl.var = present.stack,
resp.name = "Oeneis.jutta",
PA.nb.rep = 2,
PA.nb.absences = 500,
PA.strategy = 'random'
)
## formatted object summary
Oeneis_jutta_data
## plot of selected pseudo-absences
plot(Oeneis_jutta_data)
## plot of selected pseudo-absences
plot(Oeneis_jutta_data)
## define individual models options ----
Oeneis_jutta_opt <-
BIOMOD_ModelingOptions(
GLM = list(type = 'quadratic', interaction.level = 1),
GBM = list(n.trees = 1000),
GAM = list(algo = 'GAM_mgcv')
)
##ERROR: argument 1 matches multiple formal arguments
## run the individual models ----
Oeneis_jutta_models <-
BIOMOD_Modeling(
data = Oeneis_jutta_data,
models = c("GLM", "GBM", "RF", "GAM"),
models.options = BiomodOptions,
NbRunEval = 2,
DataSplit = 80,
VarImport = 3,
modeling.id = "demo1"
)
rm(list = ls(all=T))
#### Install required libraries ####
library(rgbif)
library(raster)
library(sp)
library(mapr)
library(dismo)
library(rgeos)
#### Define extent and import study area shapefile ####
#assign CRS
P4S.latlon <- CRS("+proj=longlat +datum=WGS84 +ellps=WGS84 +towgs84=0,0,0")
#Import shapefile
countries <- rgdal::readOGR("GISDATA/Study Area SHP")
#dev.off()
proj4string(countries) <- P4S.latlon
plot(countries)
class(countries)
#1st way:
countriesBuffer <- buffer(countries, width=3, dissolve=F)
plot(countriesBuffer, add=T, col='red')
#Define extent
extent <- extent(-43, 109, 25, 82) ##NEED TO BE REARRANGE FOR EAST SIDE
#### 1. GBIF DATA ####
#get the key of species by its name
key = name_backbone(name="Oeneis jutta")$speciesKey
#search data according to key. **occ_data vs occ_Search
dat <- occ_data(taxonKey = key,limit=1000) #limit??
names(dat)
names(dat$data)
#assign data to a variable
dat.data <- dat$data
dat.data
#plot occurences
map_plot(dat.data, lon = "decimalLongitude", lat = "decimalLatitude", size = 1, pch = 3)
#take all the points in the study area
dat.extent <- dat.data[dat.data$decimalLongitude >= -43 & dat.data$decimalLatitude <= 109, ]
#plot occurrences data and the study area
plot(countries); points(dat.extent$decimalLongitude , dat.extent$decimalLatitude, pch=19, col="red")
#Prepare the data
fe.gbif <- dat.extent[, c('species', 'decimalLongitude', 'decimalLatitude')]
head(fe.gbif); dim(fe.gbif)
duplicates <- duplicated(fe.gbif)
fe.gbif <- fe.gbif[!duplicates,]
head(fe.gbif); dim(fe.gbif)
fe.gbif.maxent <- fe.gbif[, c("species", "decimalLongitude", "decimalLatitude")]
names(fe.gbif.maxent) <- c("species", "lon", "lat")
head(fe.gbif.maxent); dim(fe.gbif.maxent)
plot(countries); points(fe.gbif.maxent$lon, fe.gbif.maxent$lat, pch=19, col='red')
#assign the fe.gbif as SpatialPointsDataFrame
coordinates(fe.gbif) <- ~decimalLongitude+decimalLatitude
str(fe.gbif)
fe.gbif@proj4string <- P4S.latlon
plot(countries); plot(fe.gbif, col='red', add=T, pch = 16)
# read worldclim
files.present <- list.files('D:/Github/BGE-SDM/RDATA/clipped/', pattern="[.]asc$", full.names=T) # alternatives for pattern (c|C)(e|E)(l|L)$
files.present
present.stack <- stack(files.present)
head(present.stack)
present.df <- as.data.frame(present.stack, xy=T)
coordinates(present.df) <- ~x+y
gridded(present.df) <- T
present.df@proj4string <- P4S.latlon
present.df$grid.index <- present.df@grid.index # Add grid.index value
head(present.df)
image(present.df, 'fe_buffer_bio01') #Annual Mean Temperature
fe.gbif
fe.gbif.abiotic <- over(fe.gbif, present.df) # Get climate variables + grid.index
str(fe.gbif.abiotic)
fe.gbif.abiotic
class(present.df)
head(fe.gbif.abiotic)
dim(fe.gbif.abiotic); dim(fe.gbif)
names(fe.gbif)
head(fe.gbif); str(fe.gbif)
fe.gbif <- cbind(fe.gbif, fe.gbif.abiotic) # Link species col and climate data
names(fe.gbif)
head(fe.gbif)
#error?? = duplicated() applies only to vectors sol: as.data.frame()
duplicates <- duplicated(fe.gbif@data[,c("species", "grid.index")]) # Duplicates on grid.index
str(fe.gbif@data)
fe.gbif <- fe.gbif[!duplicates,]
names(fe.gbif)
table(duplicates)
summary(fe.gbif)
fe.gbif <- na.omit(fe.gbif@data)
head(fe.gbif) ; dim(fe.gbif)
plot(raster(present.df, 'fe_buffer_bio01')); points(fe.gbif$decimalLongitude, fe.gbif$decimalLatitude) #Mean annual Temperature
points(fe.gbif$decimalLongitude, fe.gbif$decimalLatitude)
