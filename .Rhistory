unique(dat.data$basisOfRecord)
#check basis of records
unique(dat.filter$basisOfRecord)
#only preserved speciemen?
dat <- dat.filter[dat.filter$basisOfRecord == "PRESERVED_SPECIMEN",]
head(dat); dim(dat)
#plot occurences
map_plot(dat, lon = "decimalLongitude", lat = "decimalLatitude", size = 1, pch = 3)
#plot occurences
map_plot(dat.filter, lon = "decimalLongitude", lat = "decimalLatitude", size = 1, pch = 3)
#plot occurences
map_plot(dat, lon = "decimalLongitude", lat = "decimalLatitude", size = 1, pch = 3)
#plot occurences data on the study area
plot(countries); points(dat$decimalLongitude, dat$decimalLatitude, pch=19, col="red")
library(mapr)
#plot occurences
map_plot(dat, lon = "decimalLongitude", lat = "decimalLatitude", size = 1, pch = 3)
head(dat); dim(dat)
#only preserved speciemen?
dat <- dat.filter[dat.filter$basisOfRecord == "PRESERVED_SPECIMEN",]
head(dat); dim(dat)
#plot occurences
map_plot(dat, lon = "decimalLongitude", lat = "decimalLatitude", size = 1, pch = 3)
#search data according to key. **occ_data vs occ_Search
dat <- occ_data(taxonKey = key,limit=10000)
#assign data to a variable
dat.data <- dat$data
#check basis of records
unique(dat.data$basisOfRecord)
#only preserved speciemen?
dat <- dat.data[dat.filter$basisOfRecord == "PRESERVED_SPECIMEN",]
head(dat); dim(dat)
#plot occurences
map_plot(dat, lon = "decimalLongitude", lat = "decimalLatitude", size = 1, pch = 3)
dat.data
# get the columns that matter for mapping and cleaning the occurrence data:
dat.filter <- dat.data[,c("key", "scientificName", "decimalLatitude", "decimalLongitude", "basisOfRecord", "speciesKey", "species", "year","coordinateUncertaintyInMeters")] #alternative columns
dat.filter
#check basis of records
unique(dat.filter$basisOfRecord)
#only preserved speciemen?
dat <- dat.filter[dat.filter$basisOfRecord == "PRESERVED_SPECIMEN",]
head(dat); dim(dat)
#plot occurences
map_plot(dat, lon = "decimalLongitude", lat = "decimalLatitude", size = 1, pch = 3)
View(dat)
#only preserved speciemen?
dat <- dat.data[dat.filter$basisOfRecord == "PRESERVED_SPECIMEN",]
head(dat); dim(dat)
#plot occurences
map_plot(dat, lon = "decimalLongitude", lat = "decimalLatitude", size = 1, pch = 3)
#plot occurences
map_plot(dat, lon = "decimalLongitude", lat = "decimalLatitude", size = 1, pch = 3)
#only preserved speciemen?
dat <- dat.filter[dat.filter$basisOfRecord == "PRESERVED_SPECIMEN",]
head(dat); dim(dat)
#plot occurences
map_plot(dat, lon = "decimalLongitude", lat = "decimalLatitude", size = 1, pch = 3)
#only preserved speciemen?
dat <- dat.data[dat.filter$basisOfRecord == "PRESERVED_SPECIMEN",]
head(dat); dim(dat)
View(dat)
#only preserved speciemen?
dat <- dat.filter[dat.data$basisOfRecord == "PRESERVED_SPECIMEN",]
head(dat); dim(dat)
#plot occurences
map_plot(dat, lon = "decimalLongitude", lat = "decimalLatitude", size = 1, pch = 3)
#plot occurences
map_plot(dat.filter, lon = "decimalLongitude", lat = "decimalLatitude", size = 1, pch = 3)
#plot occurences
map_plot(dat.data, lon = "decimalLongitude", lat = "decimalLatitude", size = 1, pch = 3)
rm(list = ls(all=T))
setwd("D:/Github/BGE-SDM")
#### Install required libraries ####
library(rgbif)
library(raster)
library(sp)
library(mapr)
#### 1. GBIF DATA ####
#get the key of species by its name
key = name_backbone(name="Oeneis jutta")$speciesKey
#search data according to key. **occ_data vs occ_Search
dat <- occ_data(taxonKey = key,limit=10000)
#assign data to a variable
dat.data <- dat$data
dat.data
# get the columns that matter for mapping and cleaning the occurrence data:
dat.filter <- dat.data[,c("key", "scientificName", "decimalLatitude", "decimalLongitude", "basisOfRecord", "speciesKey", "species", "year","coordinateUncertaintyInMeters")] #alternative columns
dat.filter
#check basis of records
unique(dat.filter$basisOfRecord)
#only preserved speciemen?
dat.pre <- dat.filter[dat.filter$basisOfRecord == "PRESERVED_SPECIMEN",]
head(dat.pre); dim(dat.pre)
#plot occurences
map_plot(dat.pre, lon = "decimalLongitude", lat = "decimalLatitude", size = 1, pch = 3)
#plot occurences
map_plot(dat.filter, lon = "decimalLongitude", lat = "decimalLatitude", size = 1, pch = 3)
#plot occurences
map_plot(dat.data, lon = "decimalLongitude", lat = "decimalLatitude", size = 1, pch = 3)
#plot occurences
map_plot(dat.filter, lon = "decimalLongitude", lat = "decimalLatitude", size = 1, pch = 3)
### Extent of the study area
extent <- extent(-43, 109, 25, 81)
# countries boundaries
countries <- rgdal::readOGR("D:/Github/BGE-SDM/GISDATA/Study Area SHP")
proj4string(countries) <- "+proj=longlat +datum=WGS84"
plot(countries)
str(countries)
countries@bbox
#plot occurences data on the study area
plot(countries); points(dat$decimalLongitude, dat$decimalLatitude, pch=19, col="red")
#plot occurences
map_plot(dat, lon = "decimalLongitude", lat = "decimalLatitude", size = 1, pch = 3)
#plot occurences data on the study area
plot(countries); points(dat$decimalLongitude, dat$decimalLatitude, pch=19, col="red")
#plot occurences data on the study area
plot(countries); points(dat.data$decimalLongitude, dat.data$decimalLatitude, pch=19, col="red")
#plot occurences data on the study area
plot(countries); points(dat.filter$decimalLongitude, dat.filter$decimalLatitude, pch=19, col="red")
#plot occurences data on the study area
plot(countries); points(dat.filter$decimalLongitude, dat.filter$decimalLatitude, pch=19, col="red")
#plot occurences
map_plot(dat.pre, lon = "decimalLongitude", lat = "decimalLatitude", size = 1, pch = 3)
#plot occurences
map_plot(dat.pre, lon = "decimalLongitude", lat = "decimalLatitude", size = 1, pch = 3 by = "Deneme")
#plot occurences
map_plot(dat.pre, lon = "decimalLongitude", lat = "decimalLatitude", size = 1, pch = 3, by = "Deneme")
#plot occurences
map_plot(dat, lon = "decimalLongitude", lat = "decimalLatitude", size = 1, pch = 3, by = "Deneme")
#plot occurences
map_plot(dat, lon = "decimalLongitude", lat = "decimalLatitude", size = 1, pch = 3)
#plot occurences data on the study area
plot(countries); points(dat.pre$decimalLongitude, dat.pre$decimalLatitude, pch=19, col="red")
#prepare data for maxent
fe.gbif <- dat.pre[, c('species', 'decimalLongitude', 'decimalLatitude')]
head(fe.gbif); dim(fe.gbif) # 529 3
duplicates <- duplicated(fe.gbif)
fe.gbif <- fe.gbif[!duplicates,]
head(fe.gbif); dim(fe.gbif)
write.csv(fe.gbif, 'D:/Github/BGE-SDM/Output/jutta.csv', row.names=F)
View(dat.pre)
# Select native range
fe.gbif.native <- subset(fe.gbif, fe.gbif$decimalLatitude >= native.extent@ymin & fe.gbif$decimalLatitude <= native.extent@ymax & fe.gbif$decimalLongitude >= native.extent@xmin & fe.gbif$decimalLongitude <= native.extent@xmax)
native.extent <- extent(-43, 109, 25, 81)
# Select native range
fe.gbif.native <- subset(fe.gbif, fe.gbif$decimalLatitude >= native.extent@ymin & fe.gbif$decimalLatitude <= native.extent@ymax & fe.gbif$decimalLongitude >= native.extent@xmin & fe.gbif$decimalLongitude <= native.extent@xmax)
head(fe.gbif.native); dim(fe.gbif.native) # 173 3
write.csv(fe.gbif.native, 'D:/Github/BGE-SDM/Output/jutta.native.csv', row.names=F)
plot(countries); points(fe.gbif.native$decimalLongitude, fe.gbif.native$decimalLatitude, pch=19, col="purple")
coordinates(fe.gbif.native) <- ~decimalLongitude+decimalLatitude
str(fe.gbif.native)
fe.gbif.native@proj4string <- P4S.latlon
plot(countries); plot(fe.gbif.native, col='purple', add=T)
coordinates(fe.gbif.native) <- ~decimalLongitude+decimalLatitude
str(fe.gbif.native)
coordinates(fe.gbif.native) <- ~decimalLongitude+decimalLatitude
plot(countries); plot(fe.gbif.native, col='purple', add=T)
plot(countries); points(fe.gbif.native$decimalLongitude, fe.gbif.native$decimalLatitude, pch=19, col="purple")
# read worldclim ####
files.present <- list.files('D:/Github/BGE-SDM/RDATA/wc5', pattern="[.]bil$", full.names=T) # alternatives for pattern (c|C)(e|E)(l|L)$
#why 2:20?
files.present <- files.present[2:20] # remove alt
present.stack <- stack(files.present) # remove alt
head(present.stack)
present.df <- as.data.frame(present.stack, xy=T)
coordinates(present.df) <- ~x+y
gridded(present.df) <- T
#present.df@proj4string <- P4S.latlon #error
present.df$grid.index <- present.df@grid.index # Add grid.index value
head(present.df)
image(present.df, 'bio2')
# read worldclim ####
files.present <- list.files('D:/Github/BGE-SDM/RDATA/clipped/', pattern="[.]bil$", full.names=T) # alternatives for pattern (c|C)(e|E)(l|L)$
#why 2:20?
files.present <- files.present[2:20] # remove alt
present.stack <- stack(files.present) # remove alt
head(present.stack)
# read worldclim ####
files.present <- list.files('D:/Github/BGE-SDM/RDATA/clipped/', pattern="[.]asc$", full.names=T) # alternatives for pattern (c|C)(e|E)(l|L)$
#why 2:20?
files.present <- files.present[2:20] # remove alt
present.stack <- stack(files.present) # remove alt
head(present.stack)
present.df <- as.data.frame(present.stack, xy=T)
coordinates(present.df) <- ~x+y
gridded(present.df) <- T
#present.df@proj4string <- P4S.latlon #error
present.df$grid.index <- present.df@grid.index # Add grid.index value
head(present.df)
image(present.df, 'bio2')
image(present.df, 'fe_buffer_bio2')
str(fe.gbif.native); str(present.df)
fe.gbif.native.abiotic <- over(fe.gbif.native, present.df) # Get climate variables + grid.index
str(fe.gbif.native.abiotic) # 173  20
head(fe.gbif.native.abiotic)
dim(fe.gbif.native.abiotic); dim(fe.gbif.native) # 173  20  1
head(fe.gbif.native); str(fe.gbif.native)
fe.gbif.native <- cbind(fe.gbif.native, fe.gbif.native.abiotic) # Link species col and climate data
head(fe.gbif.native)
#error??
duplicates <- duplicated(fe.gbif.native[,c("species", "grid.index")]) # Duplicates on grid.index
table(duplicates) # 114 F 59 T
plot(raster(present.df, 'bio1')); points(fe.gbif.native$decimalLongitude, fe.gbif.native$decimalLatitude)
plot(raster(present.df, 'fe_buffer_bio2')); points(fe.gbif.native$decimalLongitude, fe.gbif.native$decimalLatitude)
boxplot(fe.gbif.native$bio1, main = "Mean annual Temperature", ylab="Temperature x 10 (in °C)")
boxplot(fe.gbif.native$bio12, main = "Annual precipitation", ylab="Precipitation (in mm)")
boxplot(fe.gbif.native$fe_buffer_bio2, main = "Mean annual Temperature", ylab="Temperature x 10 (in °C)")
boxplot(fe.gbif.native$fe_buffer_bio2, main = "Annual precipitation", ylab="Precipitation (in mm)")
boxplot(fe.gbif.native$fe_buffer_bio2, main = "Mean annual Temperature", ylab="Temperature x 10 (in °C)")
boxplot(fe.gbif.native$fe_buffer_bio2, main = "Annual precipitation", ylab="Precipitation (in mm)")
plot(raster(present.df, 'fe_buffer_bio2')); points(fe.gbif.native$decimalLongitude, fe.gbif.native$decimalLatitude)
?boxplot
library(ggplot2)
qplot(species, bio01, data = merbau.gbif.native.unique, geom="boxplot") + geom_point()
qplot(species, fe_buffer_bio2, data = fe.gbif.native, geom="boxplot") + geom_point()
qplot(species, fe_buffer_bio2, data = fe.gbif.native, geom="boxplot") + geom_jitter(position=position_jitter(w=0.05, h=0))
qplot(species, fe_buffer_bio12, data = fe.gbif.native, geom="boxplot") + geom_jitter(position=position_jitter(w=0.05, h=0))
mask <- raster(files.present[1])
plot(mask)
mask <- !is.na(mask) # all values to 1
mask[mask == 0] <- NA # zero values to NA
plot(mask)
summary(mask)
writeRaster(mask, filename  = "D:/Github/BGE-SDM/Output/mask.asc", format = 'ascii', NAflag = -9999, overwrite = T)
mask <- raster('D:/Github/BGE-SDM/Output/mask.asc')
plot(mask, col='red')
# add mask to present.df
present.df@data$mask <- as.data.frame(stack('D:/Github/BGE-SDM/Output/mask.asc')) # Add mask layer to spdf
head(present.df); dim(present.df) # 7776000      21
head(fe.gbif.native)
fe.gbif.native$decimalLatitude
head(fe.gbif.native)
fe.gbif.native.maxent <- fe.gbif.native[, c("species", "decimalLongitude", "decimalLatitude")]
View(fe.gbif.native)
fe.gbif.native.maxent <- fe.gbif.native$data[, c("species", "decimalLongitude", "decimalLatitude")]
names(fe.gbif.native.maxent) <- c("species", "lon", "lat")
head(fe.gbif.native.maxent); dim(fe.gbif.native.maxent) # 103   3
plot(countries); points(fe.gbif.native.maxent$lon, fe.gbif.native.maxent$lat, pch=19, col='red')
head(fe.gbif.native.isric); dim(fe.gbif.native.isric) # 173 3
plot(mask, col='red')
# add mask to present.df
present.df@data$mask <- as.data.frame(stack('D:/Github/BGE-SDM/Output/mask.asc')) # Add mask layer to spdf
head(present.df); dim(present.df) # 7776000      21
head(fe.gbif.native)
fe.gbif.native.maxent <- fe.gbif.native$data[, c("species", "decimalLongitude", "decimalLatitude")]
names(fe.gbif.native.maxent) <- c("species", "lon", "lat")
head(fe.gbif.native)
head(fe.gbif.native)
#error??
duplicates <- duplicated(fe.gbif.native[,c("species", "grid.index")]) # Duplicates on grid.index
table(duplicates) # 114 F 59 T
#error??
duplicates <- dplyr::duplicated(fe.gbif.native[,c("species", "grid.index")]) # Duplicates on grid.index
#check basis of records
unique(dat.filter$basisOfRecord)
#only preserved speciemen?
dat.pre <- dat.filter[dat.filter$basisOfRecord == "PRESERVED_SPECIMEN",]
head(dat.pre); dim(dat.pre)
#plot occurences
map_plot(dat.pre, lon = "decimalLongitude", lat = "decimalLatitude", size = 1, pch = 3)
#plot occurences
map_plot(dat, lon = "decimalLongitude", lat = "decimalLatitude", size = 1, pch = 3)
View(fe.gbif.native)
View(fe.gbif)
head(fe.gbif.native); dim(fe.gbif.native) # 173 3
write.csv(fe.gbif.native, 'D:/Github/BGE-SDM/Output/jutta.native.csv', row.names=F)
plot(countries); points(fe.gbif.native$decimalLongitude, fe.gbif.native$decimalLatitude, pch=19, col="purple")
View(fe.gbif.native.abiotic)
head(fe.gbif.native)
fe.gbif.native.maxent <- fe.gbif.native$data[, c("species", "decimalLongitude", "decimalLatitude")]
names(fe.gbif.native.maxent) <- c("species", "lon", "lat")
save(list=ls(all=TRUE), file="D:\Github\BGE-SDM\SDM.RData") # save RDATA for later use
save(list=ls(all=TRUE), file="D:/Github/BGE-SDM/SDM.RData") # save RDATA for later use
#save(list=ls(all=TRUE), file="D:/Github/BGE-SDM/SDM.RData") # save RDATA for later use
load("D:/Github/BGE-SDM/SDM.RData")
rm(list = ls(all=T))
#### Install required libraries ####
library(rgbif)
library(raster)
library(sp)
library(mapr)
#### 1. GBIF DATA ####
#get the key of species by its name
key = name_backbone(name="Oeneis jutta")$speciesKey
#search data according to key. **occ_data vs occ_Search
dat <- occ_data(taxonKey = key,limit=10000)
dat2 <- occ_search(taxonKey = key,limit=10000)
View(dat)
dat2 <- occ_search(taxonKey = key,limit=100)
View(dat2)
#search data according to key. **occ_data vs occ_Search
dat <- occ_data(taxonKey = key,limit=100)
View(dat)
#search data according to key. **occ_data vs occ_Search
dat <- occ_data(taxonKey = key,limit=1000)
dat2 <- occ_search(taxonKey = key,limit=1000)
View(dat2)
#plot occurences
map_plot(dat, lon = "decimalLongitude", lat = "decimalLatitude", size = 1, pch = 3)
#plot occurences
map_plot(dat2, lon = "decimalLongitude", lat = "decimalLatitude", size = 1, pch = 3)
#search data according to key. **occ_data vs occ_Search
dat <- occ_data(taxonKey = key,limit=1000)
#search data according to key. **occ_data vs occ_Search
dat <- occ_data(taxonKey = key,limit=1000)
View(dat)
#assign data to a variable
dat.data <- dat$data
dat.data
# get the columns that matter for mapping and cleaning the occurrence data:
dat.filter <- dat.data[,c("key", "scientificName", "decimalLatitude", "decimalLongitude", "basisOfRecord", "speciesKey", "species", "year","coordinateUncertaintyInMeters")] #alternative columns
dat.filter
#check basis of records
unique(dat.filter$basisOfRecord)
#only preserved speciemen?
dat.pre <- dat.filter[dat.filter$basisOfRecord == "PRESERVED_SPECIMEN",]
head(dat.pre); dim(dat.pre)
View(dat.pre)
#only preserved speciemen?
dat.pre <- dat.filter[dat.filter$basisOfRecord == "PRESERVED_SPECIMEN",]
head(dat.pre); dim(dat.pre)
### Extent of the study area
extent <- extent(-43, 109, 25, 81) ##NEED TO BE REARRANGE
native.extent <- extent(-43, 109, 25, 81)
# countries boundaries
countries <- rgdal::readOGR("D:/Github/BGE-SDM/GISDATA/Study Area SHP")
proj4string(countries) <- "+proj=longlat +datum=WGS84"
plot(countries)
str(countries)
#plot occurences data on the study area
plot(countries); points(dat.pre$decimalLongitude, dat.pre$decimalLatitude, pch=19, col="red")
#plot occurences data on the study area
plot(countries); points(dat.pre$decimalLongitude, dat.pre$decimalLatitude, pch=19, col="red")
#search data according to key. **occ_data vs occ_Search
dat <- occ_data(taxonKey = key,limit=10000)
#plot occurences data on the study area
plot(countries); points(dat.pre$decimalLongitude, dat.pre$decimalLatitude, pch=19, col="red")
head(dat)
#search data according to key. **occ_data vs occ_Search
dat <- occ_data(taxonKey = key,limit=1000)
head(dat)
#plot occurences
map_plot(dat, lon = "decimalLongitude", lat = "decimalLatitude", size = 1, pch = 3)
names(dat)
names(dat.meta)
names(dat$meta)
names(dat$data)
#check basis of records
unique(dat.filter$basisOfRecord)
### Extent of the study area
extent <- extent(-43, 109, 25, 81) ##NEED TO BE REARRANGE
native.extent <- extent(-43, 109, 25, 81)
# countries boundaries
countries <- rgdal::readOGR("D:/Github/BGE-SDM/GISDATA/Study Area SHP")
proj4string(countries) <- "+proj=longlat +datum=WGS84"
plot(countries)
#plot occurences data on the study area
plot(countries); points(dat.pre$decimalLongitude, dat.pre$decimalLatitude, pch=19, col="red")
#plot occurences data on the study area
plot(countries); points(dat.data$decimalLongitude, dat.pre$decimalLatitude, pch=19, col="red")
#plot occurences data on the study area
plot(countries); points(dat.data$decimalLongitude, dat.pre$decimalLatitude, pch=19, col="red")
#plot occurences data on the study area
plot(countries); points(dat.data$decimalLongitude, dat.pre$decimalLatitude, pch=19, col="red")
plot(countries)
plot(countries)
# countries boundaries
countries <- rgdal::readOGR("D:/Github/BGE-SDM/GISDATA/Study Area SHP")
proj4string(countries) <- "+proj=longlat +datum=WGS84"
plot(countries)
#plot occurences data on the study area
plot(countries); points(dat.data$decimalLongitude, dat.pre$decimalLatitude, pch=19, col="red")
countries <- crop(countries, extent)
plot(countries)
#plot occurences data on the study area
plot(countries); points(dat.data$decimalLongitude, dat.pre$decimalLatitude, pch=19, col="red")
plot(countries)
### Extent of the study area
extent <- extent(-43, 109, 25, 81) ##NEED TO BE REARRANGE
# countries boundaries
countries <- rgdal::readOGR("D:/Github/BGE-SDM/GISDATA/Study Area SHP")
proj4string(countries) <- "+proj=longlat +datum=WGS84"
countries <- crop(countries, extent)
plot(countries)
# countries boundaries
countries <- rgdal::readOGR("D:/Github/BGE-SDM/GISDATA/Study Area SHP")
plot(countries)
def.off()
dev.off()
plot(countries)
#plot occurences data on the study area
plot(countries); points(dat.data$decimalLongitude, dat.pre$decimalLatitude, pch=19, col="red")
#plot occurences data on the study area
plot(countries); points(dat.data$decimalLongitude, dat.pre$decimalLatitude, pch=19, col="red")
proj4string(countries) <- "+proj=longlat +datum=WGS84"
countries <- crop(countries, extent)
plot(countries)
str(countries)
#plot occurences data on the study area
plot(countries); points(dat.data$decimalLongitude, dat.pre$decimalLatitude, pch=19, col="red")
#plot occurences data on the study area
plot(countries); points(dat.data$decimalLongitude, dat.pre$decimalLatitude, pch=19, col="red")
#plot occurences data on the study area
plot(countries); points(dat.data$decimalLongitude, dat.data$decimalLatitude, pch=19, col="red")
#prepare data for maxent
fe.gbif <- dat.data[, c('species', 'decimalLongitude', 'decimalLatitude')]
head(fe.gbif); dim(fe.gbif)
duplicates <- duplicated(fe.gbif)
fe.gbif <- fe.gbif[!duplicates,]
head(fe.gbif); dim(fe.gbif)
duplicates
head(fe.gbif); dim(fe.gbif)
write.csv(fe.gbif, 'D:/Github/BGE-SDM/Output/jutta.csv', row.names=F)
write.csv(fe.gbif, 'D:/Github/BGE-SDM/Output/Oeneis_jutta.csv', row.names=F)
files.present
# read worldclim ####
files.present <- list.files('D:/Github/BGE-SDM/RDATA/clipped/', pattern="[.]asc$", full.names=T) # alternatives for pattern (c|C)(e|E)(l|L)$
files.present
global.clim <- getData("worldclim", var="bio", res=5, download=T, path="RDATA")
### Loop for cropping with extent and write as ascii ####
for(i in files.present)  {
raster <- raster(i)
raster <- crop(raster, extent)
writeRaster(raster,
filename  = paste("D:/Github/BGE-SDM/RDATA/clipped/", "fe_buffer_", basename(i), sep = ""),
format    = 'ascii',
NAflag    = -9999,
overwrite = T)
}
global.clim <- getData("worldclim", var="bio", res=5, download=T, path="RDATA")
global.clim <- getData("worldclim", var="bio", res=5, download=T, path="RDATA")
### Loop for cropping with extent and write as ascii ####
for(i in files.present)  {
raster <- raster(i)
raster <- crop(raster, extent)
writeRaster(raster,
filename  = paste("D:/Github/BGE-SDM/RDATA/clipped/", "fe_buffer_", basename(i), sep = ""),
format    = 'ascii',
NAflag    = -9999,
overwrite = T)
}
### Loop for cropping with extent and write as ascii ####
for(i in files.present)  {
raster <- raster(i)
raster <- crop(raster, extent)
writeRaster(raster,
filename  = paste("D:/Github/BGE-SDM/RDATA/clipped/", "fe_buffer_", basename(i), sep = ""),
format    = 'ascii',
NAflag    = -9999,
overwrite = T)
}
# read worldclim ####
files.present <- list.files('D:/Github/BGE-SDM/RDATA/clipped/', pattern="[.]asc$", full.names=T) # alternatives for pattern (c|C)(e|E)(l|L)$
files.present
files.present <- list.files('D:/Github/BGE-SDM/RDATA/wc5/', pattern="[.]bil$", full.names=T) # alternatives for pattern (c|C)(e|E)(l|L)$
### Loop for cropping with extent and write as ascii ####
for(i in files.present)  {
raster <- raster(i)
raster <- crop(raster, extent)
writeRaster(raster,
filename  = paste("D:/Github/BGE-SDM/RDATA/clipped/", "fe_buffer_", basename(i), sep = ""),
format    = 'ascii',
NAflag    = -9999,
overwrite = T)
}
files.present
# read worldclim ####
files.present <- list.files('D:/Github/BGE-SDM/RDATA/clipped/', pattern="[.]asc$", full.names=T) # alternatives for pattern (c|C)(e|E)(l|L)$
files.present
present.stack <- stack(files.present)
head(present.stack)
present.df <- as.data.frame(present.stack, xy=T)
coordinates(present.df) <- ~x+y
head(present.df)
gridded(present.df) <- T
#present.df@proj4string <- P4S.latlon #error
present.df$grid.index <- present.df@grid.index # Add grid.index value
head(present.df)
image(present.df, 'fe_buffer_bio2')
str(present.df)
present.df@coords
class(present.df)
head(present.df)
str(fe.gbif.native); str(present.df)
str(fe.gbif); str(present.df)
str(fe.gbif)
fe.gbif.abiotic <- over(fe.gbif, present.df) # Get climate variables + grid.index
class(fe.gbif)
View(fe.gbif)
View(fe.gbif)
class(present.df)
######
### 3. Get abiotic bioclim data ####
merbau.gbif@proj4string <- P4S.latlon
######
### 3. Get abiotic bioclim data ####
P4S.latlon <- CRS("+proj=longlat +datum=WGS84 +ellps=WGS84 +towgs84=0,0,0")
merbau.gbif@proj4string <- P4S.latlon
fe.gbif.abiotic <- over(fe.gbif, present.df) # Get climate variables + grid.index
str(fe.gbif); str(present.df)
coordinates(fe.gbif)
head(fe.gbif); dim(fe.gbif)
coordinates(fe.gbif) <- ~decimalLongitude+decimalLatitude
str(fe.gbif)
fe.gbif@proj4string <- P4S.latlon
plot(countries); plot(fe.gbif, col='purple', add=T)
fe.gbif.abiotic <- over(fe.gbif, present.df) # Get climate variables + grid.index
present.df@proj4string <- P4S.latlon
fe.gbif.abiotic <- over(fe.gbif, present.df) # Get climate variables + grid.index
head(fe.gbif.abiotic)
fe.gbif
